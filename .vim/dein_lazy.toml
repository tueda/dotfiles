[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'roxma/nvim-yarp'
# NOTE: requires "pip3 install pynvim"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['neco-syntax', 'nvim-yarp', 'vim-hug-neovim-rpc']
if = "(has('nvim') || v:version >= 800) && has('python3')"
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'neco-syntax'
if = "!((has('nvim') || v:version >= 800) && has('python3')) && has('lua')"
on_i = 1
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#skip_auto_completion_time = '0.1'
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
hook_add = '''
" Don't save ft for toml for toml-vim.
  autocmd BufNewFile,BufRead *.toml setlocal viewoptions=cursor,folds,slash,unix
'''
on_ft = 'toml'

[[plugins]]
repo = 'dylon/vim-antlr'
on_ft = ['antlr3', 'antlr4']

[[plugins]]
repo = 'Chiel92/vim-autoformat'
hook_source = '''
  noremap <F8> :Autoformat<CR>
  let g:formatdef_scalafmt = '"scalafmt --stdin 2>/dev/null"'
  let g:formatters_scala = ['scalafmt']
  autocmd BufWrite *.rs :Autoformat
'''
on_ft = ['c', 'cpp', 'fortran', 'java', 'objc', 'python', 'rust', 'scala']

[[plugins]]
repo = 'vim-scripts/bats.vim'
on_ft = 'bats'

#[[plugins]]
#repo = 'rhysd/vim-clang-format'
#hook_source = '''
#  let g:clang_format#detect_style_file = 1
#  autocmd FileType c,cpp,objc map <buffer> <F7> :ClangFormat<CR>
#'''
#on_ft = ['c', 'cpp', 'objc']

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]]
repo = 'tueda/form.vim'
hook_source = '''
  let g:form_enhanced_color = 0
  let g:form_makeatletter = 1
'''
on_ft = 'form'

#[[plugins]]
#repo = 'chadversary/vim-meson'
#on_ft = 'meson'

[[plugins]]
repo = 'pest-parser/pest.vim'
on_ft = 'pest'

[[plugins]]
repo = 'nvie/vim-flake8'
hook_source = '''
  let g:flake8_show_quickfix=1
  let g:flake8_show_in_gutter=1
  let g:flake8_show_in_file=1
  let g:flake8_max_markers=5000
'''
on_ft = 'python'

#[[plugins]]
#repo = 'tell-k/vim-autopep8'
#hook_source = '''
#  let g:autopep8_disable_show_diff=1
#  let g:autopep8_aggressive=2
#  autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>
#'''
#on_ft = 'python'

[[plugins]]
#repo = 'vim-scripts/jpythonfold.vim'
#repo = 'mbadran/jpythonfold.vim'
repo = 'tueda/jpythonfold.vim'
hook_source = '''
  let g:jpythonfold_Compact=1
  let g:jpythonfold_CustomFoldText=1
  let g:jpythonfold_FoldTextWithoutDocstrings=1
'''
on_ft = 'python'

#[[plugins]]
#repo =  'tmhedberg/SimpylFold'
#on_ft = 'python'

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_source = '''
  let g:rust_fold = 1
  setlocal foldcolumn=4
'''
on_ft = 'rust'

#[[plugins]]
#repo = 'racer-rust/vim-racer'
#hook_source = '''
#au FileType rust nmap gd <Plug>(rust-def)
#au FileType rust nmap gs <Plug>(rust-def-split)
#au FileType rust nmap gx <Plug>(rust-def-vertical)
#au FileType rust nmap <leader>gd <Plug>(rust-doc)
#'''
#on_ft = 'rust'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'matze/vim-tex-fold'
hook_source = '''
  let g:tex_fold_additional_envs = [
    \ 'tikzpicture'
    \ ]
'''
on_ft = 'tex'
